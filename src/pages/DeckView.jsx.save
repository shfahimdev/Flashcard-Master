import { useState } from "react";
import { useParams, useNavigate, Link } from "react-router-dom";
import { motion } from "framer-motion";
import {
    ArrowLeft,
    Plus,
    Zap,
    Brain,
    FileText,
    Edit,
    Trash2,
} from "lucide-react";
import { useDeck } from "../context/DeckContext";
import AddCardModal from "../components/AddCardModal";
import EditCardModal from "../components/EditCardModal";

function DeckView() {
    const { id } = useParams();
    const navigate = useNavigate();
    const { getDeck, deleteCard } = useDeck();
    const deck = getDeck(id);
    const [showAddModal, setShowAddModal] = useState(false);
    const [editingCard, setEditingCard] = useState(null);

    if (!deck) {
        return (
            <div className="min-h-screen flex items-center justify-center">
                <div className="text-center">
                    <h2 className="text-2xl font-bold text-gray-900 mb-2">
                        Deck not found
                    </h2>
                    <Link to="/" className="text-indigo-600 hover:underline">
                        Go back to dashboard
                    </Link>
                </div>
            </div>
        );
    }

    const handleDelete = (cardId) => {
        if (window.confirm("Delete this card?")) {
            deleteCard(id, cardId);
        }
    };

    return (
        <div className="min-h-screen p-8">
            <div className="max-w-6xl mx-auto">
                <motion.div
                    initial={{ opacity: 0, y: -20 }}
                    animate={{ opacity: 1, y: 0 }}
                >
                    <button
                        onClick={() => navigate("/")}
                        className="flex items-center gap-2 text-gray-600 hover:text-gray-900 mb-6 transition-colors"
                    >
                        <ArrowLeft size={20} />
                        Back to Dashboard
                    </button>

                    <div className="mb-8">
                        <h1 className="text-4xl font-bold text-gray-900 mb-2">
                            {deck.name}
                        </h1>
                        {deck.description && (
                            <p className="text-gray-600">{deck.description}</p>
                        )}
                        <p className="text-sm text-gray-500 mt-2">
                            {deck.
cards.length} cards
                        </p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
                        <motion.button
                            whileHover={{ scale: 1.02 }}
                            whileTap={{ scale: 0.98 }}
                            onClick={() => navigate(`/deck/${id}/flash`)}
                            disabled={deck.cards.length === 0}
                            className="flex items-center gap-3 p-4 bg-gradient-to-r from-purple-500 to-indigo-600 text-white rounded-xl shadow-lg hover:shadow-xl transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            <Zap size={24} />
                            <div className="text-left">
                                <div className="font-semibold">Flashcards</div>
                                <div className="text-sm opacity-90">
                                    Flip through cards
                                </div>
                            </div>
                        </motion.button>

                        <motion.button
                            whileHover={{ scale: 1.02 }}
                            whileTap={{ scale: 0.98 }}
                            onClick={() => navigate(`/deck/${id}/learn`)}
                            disabled={deck.cards.length === 0}
                            className="flex items-center gap-3 p-4 bg-gradient-to-r from-blue-500 to-cyan-600 text-white rounded-xl shadow-lg hover:shadow-xl transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            <Brain size={24} />
                            <div className="text-left">
                                <div className="font-semibold">Learn</div>
                                <div className="text-sm opacity-90">
                                    Study with tracking
                                </div>
                            </div>
                        </motion.button>

                        <motion.button
                            whileHover={{ scale: 1.02 }}
                            whileTap={{ scale: 0.98 }}
                            onClick={() => navigate(`/deck/${id}/test`)}
                            disabled={deck.cards.length < 4}
                            className="flex items-center gap-3 p-4 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-xl shadow-lg hover:shadow-xl transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            <FileText size={24} />
                            <div className="text-left">
                                <div className="font-semibold">Test</div>
                                <div className="text-sm opacity-90">
                                    Take a quiz
                                </div>
                            </div>
                        </motion.button>
                    </div>

                    <div className="flex justify-between items-center mb-6">
                        <h2 className="text-2xl font-bold text-gray-900">
                            Cards
                        </h2>
                        <motion.button
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            onClick={() => setShowAddModal(true)}
                            className="flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
                        >
                            <Plus size={18} />
                            Add Card
                        </motion.button>
                    </div>

                    {deck.cards.length === 0 ? (
                        <div className="text-center py-16 bg-white rounded-xl shadow">
                            <p className="text-gray-500">
                                No cards yet. Add your first card to get
                                started!
                            </p>
                        </div>
                    ) : (
                        <div className="space-y-4">
                            {deck.cards.map((card, index) => (
                                <motion.div
                                    key={card.id}
                                    initial={{ opacity: 0, x: -20 }}
                                    animate={{ opacity: 1, x: 0 }}
                                    transition={{ delay: index * 0.05 }}
                                    className="bg-white rounded-lg shadow p-6 hover:shadow-lg transition-shadow"
                                >
                                    <div className="flex justify-between gap-4">
                                        <div className="flex-1 grid grid-cols-1 md:grid-cols-2 gap-4">
                                            <div>
                                                <div className="text-xs font-semibold text-gray-500 uppercase mb-1">
                                                    Front
                                                </div>
                                                <div className="text-gray-900">
                                                    {card.front}
                                                </div>
                                            </div>
                                            <div>
                                                <div className="text-xs font-semibold text-gray-500 uppercase mb-1">
                                                    Back
                                                </div>
                                                <div className="text-gray-900">
                                                    {card.back}
                                                </div>
                                            </div>
                                        </div>
                                        <div className="flex gap-2">
                                            <motion.button
                                                whileHover={{ scale: 1.1 }}
                                                whileTap={{ scale: 0.9 }}
                                                onClick={() =>
                                                    setEditingCard(card)
                                                }
                                                className="p-2 text-indigo-600 hover:bg-indigo-50 rounded-lg transition-colors"
                                            >
                                                <Edit size={18} />
                                            </motion.button>
                                            <motion.button
                                                whileHover={{ scale: 1.1 }}
                                                whileTap={{ scale: 0.9 }}
                                                onClick={() =>
                                                    handleDelete(card.id)
                                                }
                                                className="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                                            >
                                                <Trash2 size={18} />
                                            </motion.button>
                                        </div>
                                    </div>
                                </motion.div>
                            ))}
                        </div>
                    )}
                </motion.div>
            </div>

            {showAddModal && (
                <AddCardModal
                    deckId={id}
                    onClose={() => setShowAddModal(false)}
                />
            )}
            {editingCard && (
                <EditCardModal
                    deckId={id}
                    card={editingCard}
                    onClose={() => setEditingCard(null)}
                />
            )}
        </div>
    );
}

export default DeckView;
